{
    "transformations": [
        {
            "sourcePointer": "/files",
            "resultPointer": "/paths",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/x"
                },
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/y"
                }
            ]
        },
        {
            "append": true,
            "sourcePointer": "/files",
            "resultPointer": "/paths",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/z"
                }
            ]
        },
        {
            "append": true,
            "resultPointer": "/paths",
            "sourcePointer": "/files",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": ""
                }
            ]
        },
        {
            "sourcePointer": "/authors[i]/organizations",
            "resultPointer": "/creators[i]/affiliations",
            "steps": [
                {
                    "sourcePointer": "",
                    "resultPointer": ""
                },
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/orgName"
                }
            ]
        },
        {
            "sourcePointer": "/authors[i]/organizations",
            "resultPointer": "/flattened",
            "steps": [
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/org"
                },
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/orgName"
                }
            ]
        },
        {
            "sourcePointer": "",
            "resultPointer": "/expressionsResults",
            "steps": [
                {
                    "resultPointer": "/literal",
                    "expression": "\"literal\""
                },
                {
                    "resultPointer": "/uuid",
                    "expression": "generateUuid()"
                },
                {
                    "resultPointer": "/uuid",
                    "expression": "remove()"
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/total",
                    "expression": "reduce(res = res + x)"
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/count",
                    "expression": "reduce(res = res + 1)"
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/concat",
                    "expression": "reduce(res = (res ? res + ', ' : '') + x)"
                }
            ]
        },
        {
            "useResultAsSource": true,
            "resultPointer": "",
            "steps": [
                {
                    "sourcePointer": "/flattened",
                    "resultPointer": "/flattened",
                    "expression": "filter(ctx = ctx ? ctx : new Set(); res = ctx.add(x.orgName);)"
                }
            ]
        }
    ]
}