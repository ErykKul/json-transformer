{
    "transformations": [
        {
            "sourcePointer": "/files",
            "resultPointer": "/paths",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/x"
                },
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/y"
                }
            ]
        },
        {
            "append": true,
            "sourcePointer": "/files",
            "resultPointer": "/paths",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": "/z"
                }
            ]
        },
        {
            "append": true,
            "resultPointer": "/paths",
            "sourcePointer": "/files",
            "steps": [
                {
                    "sourcePointer": "/path",
                    "resultPointer": ""
                }
            ]
        },
        {
            "sourcePointer": "/authors[i]/organizations",
            "resultPointer": "/creators[i]/affiliations",
            "steps": [
                {
                    "sourcePointer": "",
                    "resultPointer": ""
                },
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/orgName"
                }
            ]
        },
        {
            "sourcePointer": "/authors[i]/organizations",
            "resultPointer": "/flattened",
            "steps": [
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/org"
                },
                {
                    "sourcePointer": "/name",
                    "resultPointer": "/orgName"
                }
            ]
        },
        {
            "sourcePointer": "",
            "resultPointer": "/expressionsResults",
            "steps": [
                {
                    "resultPointer": "/literal",
                    "expressions": [
                        "\"literal\""
                    ]
                },
                {
                    "resultPointer": "/uuid",
                    "expressions": [
                        "withLogger(generateUuid())",
                        "remove()"
                    ]
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/total",
                    "expressions": [
                        "reduce(res = res + x)"
                    ]
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/count",
                    "expressions": [
                        "reduce(res = res + 1)"
                    ]
                },
                {
                    "sourcePointer": "/numbers",
                    "resultPointer": "/concat",
                    "expressions": [
                        "reduce(res = (res ? res + ', ' : '') + x)"
                    ]
                }
            ]
        },
        {
            "useResultAsSource": true,
            "sourcePointer": "",
            "resultPointer": "",
            "steps": [
                {
                    "sourcePointer": "/flattened",
                    "resultPointer": "/flattened",
                    "expressions": [
                        "script(set = new Set())",
                        "filter(res = set.add(x.orgName))",
                        "useResultAsSource(script(x.add({org: 'z', orgName: 'z'}); res = x))"
                    ]
                }
            ]
        },
        {
            "sourcePointer": "",
            "resultPointer": "",
            "steps": [
                {
                    "sourcePointer": "/files",
                    "resultPointer": "/graph",
                    "expressions": [
                        "script(list = new List())",
                        "map(last = x.path.split('/').slice(-1); id = ''; parent = ''; list.addAll(x.path.split('/').map(function(p) { id = id + '/' + p; r = { id: id, name: p, parent: parent, isDir: p != last }; parent = parent + '/' + p; return r })))",
                        "script(res = list)"
                    ]
                }
            ]
        },
        {
            "useResultAsSource": true,
            "sourcePointer": "",
            "resultPointer": "",
            "steps": [
                {
                    "sourcePointer": "/graph",
                    "resultPointer": "/graph",
                    "expressions": [
                        "script(set = new Set())",
                        "filter(res = set.add(x))",
                        "useResultAsSource(map(if (x.parent == '') delete x.parent; res = x))",
                        "//script(UUID = Java.type('java.util.UUID'); ids = new Map(); res = null;)",
                        "//useResultAsSource(map(ids.put(x.id, UUID.randomUUID().toString()); res = x))",
                        "//useResultAsSource(map(x.id = ids.get(x.id); if (typeof x.parent !== 'undefined') x.parent = ids.get(x.parent); res = x))"
                    ]
                }
            ]
        }
    ]
}